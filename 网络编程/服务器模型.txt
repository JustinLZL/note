服务器模型

硬件服务器: 主机  集群
	厂商:IBM HP 联想 浪潮

软件服务器:编写的服务端程序,依托于硬件服务器运行,提供给用户一定的软件服务

分类:
	1.webserver:网站后端程序提供网站请求的后端处理和响应
	2.httpserver:处理http请求,回复http响应
	3.邮件服务器:处理邮件
	4.文件服务器:处理文件传输

功能:网络连接,逻辑处理,数据的交互,数据的传输,协议的实现

模型结构:
	1.c/s	(客户端服务器模型)
	2.b/s	(浏览器服务器模型)

服务器目标:处理速度快,数据更安全,并发量大

硬件:更高的配置,集成分布基础,更好的网络速度,更多主机,更多的网络安全性

软件:程序占有更少的资源,更稳定的运行效果,更流畅的运行速度,采用更安全更合理的技术


基础的服务器模型

1.循环(网络)服务器:单进程程序,循环接收客户端请求,处理完一个后再去接收下一个请求
	优点:实现简单,占用资源少
	缺点:无法同时连接多个客户端,当一个客户端长期占有服务器时,形成其他客户端无法操作的情况
	适用情况:任务比较短暂,udp套接字更合适

2.并发(网络)服务器:同时处理多个客户端的任务请求
	1.IO并发:
		类型:1.IO多路复用
			2.协程
		优点:单进程,资源消耗少,效率较高,适用于IO类型服务器
		缺点:不能监控CPU密集型程序,本质是单进程,所以不能长期阻塞消息的收发
	
	2.多进程/多线程并发:为每一个客户端单独提供一个进程或者线程处理请求.由于进程线程执行独立所以对其他进程不会有影响
		优点:客户端可以长期占有服务器,操作不会对其他进程线程产生影响
		缺点:消耗资源较多

多进程并发:
	
	使用fork完成并发

	1.创建套接字,绑定,监听
	2.等待接收客户端请求  accept
	3.创建子进程处理客户端请求
		父进程继续等待其他客户端连接
	4.客户端退出则子进程退出

TFTP文件服务器
功能要求:
	1.客户端有简单的命令提示界面
	2.根据提示选择相应的功能
		1.查看服务器文件库的文件列表(只显示普通文件)
		2.下载其中的某个文件到本地
		3.可以将本地文件上传到文件库中
		4.退出
	3.服务器需求
		1.处理客户端各种请求
		2.允许多个客户端同时访问操作

1.技术分析
	1.TCP套接字
	2.多进程并发
	3.注意:粘包,僵尸进程
	4.数据传输:文件名传输 注意粘包处理
				注意传输结尾
2.设计整体结构
	1.封装成类,将功能函数写进类中
		class TFTPserver():
			def __init__():
				交互套接字
			def do_list()
			def do_get()
			def do_put()
	2.main()函数控制整体流程
		创建套接字
		接收客户端连接
		创建子进程
		父进程继续等待连接

os.listdir(PATH)
功能:获取PATH路径文件夹下的文件列表

os.path.isfile()
功能:判断一个文件的类型是否为普通文件

os.patn.isdir()
功能:判断一个文件的类型是否为目录


threading 的多线程并发

每有一个客户端就创建一个新的进程处理客户端请求

对比多进程
优点:资源消耗少
缺点:需要处理共享资源
	需要注意GIL问题

实现步骤
1.创建套接字,绑定,监听
2.接收客户端请求,创建新的线程
3.主线程继续等待其他用户端连接,分支线程执行客户端请求
4.处理完客户端请求后,分支线程退出,关闭客户端套接字


socket 服务器的集成模块

python2 : SocketServer
python3 : socketserver

功能:通过模块的接口完成基于多进程/多线程的tcp/udp的socket并发程序

 'StreamRequestHandler'			处理tcp请求
 'DatagramRequestHandler'		处理udp请求
 
 'ForkingMixIn'			建立多进程
 'ForkingTCPServer'		建立多进程tcp server
 'ForkingUDPServer'		建立多进程udp server
 
 'ThreadingMixIn'		建立多线程
 'ThreadingTCPServer'	建立多线程tcp server
 'ThreadingUDPServer'	建立多线程udp server

 'TCPServer'		建立tcp server
 'UDPServer'		建立udp server


 基于多线程并发的HTTPserver

 1.接收浏览器的http请求
 2.对请求进行解析
 3.根据解析判断请求内容
 4.将要返回的内容组织http响应格式发送给客户端

 升级:
 1.使用多线程并发
 2.增加具体请求解析
 3.增加数据获取功能
 4.封装使用类

 技术实现: threading  并发
 		  tcp socket 传输
 		  HTTP协议响应和请求的格式