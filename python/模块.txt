模块 Module
    模块是一个包含有一系数据,函数,类等组成的程序组
    模块是一个文件,模块文件名通常以'.py'结尾

模块的作用:
    1.让一些相关的数据,函数,类等有逻辑地组织在一起,使逻辑结构更加清晰
    2.模块中的变量,函数和类等可提供其他模块或程序使用

模块的分类:
    1.内置模块(builtins)在解析器的内部可以直接使用(通常用C语言编写)
    2.标准库模块,安装python时已安装可直接使用(通常用python编写)
    3.第三方模块(通常为开源),需要自己安装
    4.用户自己编定的模块(可以作为其他人的第三方模块)

模块的导入 
	import 模块名
    import 模块名1 [as 模块新名1], 模块名2 [as 模块新名2],...
	
    e.g.:
        import math #导入数学模块
        import sys, os #导入sys和os模块

	作用:将一个模块整体导入当前模块中
	
    属性用法:
        模块名.属性名

help(obj) 可以查看模块的文档字符串


from ...import 语句
    from 模块名 import 模块属性名1 [as 属性名新名1], 模块属性名2 [as 属性名新名2]

    作用:
        将某模块的一个或多个属性导入当前模块的作用域
    e.g.:
		from math import pi

from import * 语句
    from 模块名 import *
    作用:
        将某模块的所有属性导入当前模块

模块的加载过程:
    在模块导入时,模块所有的语句会被执行
    如果一个模块已经被导入,则再次导入时不会重新执行模块内的语句

模块的重新加载:
    import mymod
    import imp
    imp.reload(mymod) #在运行时重新加载mymod模块

模块被导入和执行的过程:
    1.先搜索相关路径找模块(.py文件)
    2.判断是否有此模块对应的.py文件,如果.pyc文件比.py文件新,则直接加载.pyc文件
    3.否则用模块.py文件生成.pyc并加载执行

pyc模块的编译

          编译          解释执行
mymod.py------>mymod.pyc--------->python3


模块的文档字符串
    模块内第一个没有赋值给任何变量的字符串为文档字符串
	
模块的内置属性
	__doc__属性:用于绑定模块的文档字符串
	__file__属性:绑定模块对应的文件路径
	__name__属性:用来记录模块自身的名字
		1.记录模块名
		2.判断是否为主模块
		说明:
			1.当此模块作为主模块(也就是第一个运行的模块)运行时,__name__绑定__'main'__
			2.不是主模块,__name__绑定模块名(文件名去掉.py后缀)

模块的__all__列表
    模块中的__all__列表是一个可以用来存放可导出属性的字符串列表
    作用:
        限定当用from XXX import * 语句导入时,只导入__all__列表内的属性

模块的隐藏属性
    模块中以'_'开头的属性,在from xxx import * 导入时将不被导入,通常称这些属性为隐藏属性


dir 函数
    dir([对象]) 返回一个字符串列表
    作用:
        1.如果没有参数调用,则返回当前作用域内所有变量的列表
        2.如果给定一个对象作为参数,则返回这个对象的所在变量(属性)列表
            对于一个模块,返回这个模块的全部变量
            对于一个类对象,返回类对象的所有变量,并递归基类对象的所有变量
            对于其他对象,返回所有对象变量、类变量和基类变量

数学模块 math
    文档详见  '数学模块math.html'

时间模块 time
	此模块提供了时间相关的函数，且一直可用
	时间简介
		公元纪年是从公元 0000年1月1日0时开始的
		计算机元年是从1970年1月1日0时开始的,此时时间为0,之后每过一秒时间+1
		UTC 时间 (Coordinated Universal Time) 是从Greenwich时间开始计算的，UTC 时间不会因时区问题而产生错误
		DST 阳光节约时间(Daylight Saving Time)，又称夏令时, 是一个经过日照时间修正后的时间

时间元组
	时间元组是一个9个整型元素组成的,这九个元素自前至后依次为
			四位的年(如: 1993)
			月 (1-12)
			日 (1-31)
			时 (0-23)
			分 (0-59)
			秒 (0-59)
			星期几 (0-6, 周一是 0)
			元旦开始日 (1-366)
			夏令时修正时间 (-1, 0 or 1). 
		注：如果年份值小于100,则会自动转换为加上1900后的值

time.altzone 夏令时时间与UTC时间差(秒为单位) 
time.daylight 夏令时校正时间 
time.timezone 本地区时间与UTC时间差(秒为单位) 
time.tzname 时区名字的元组,第一个名字为经夏令时修正后的时区名 
注： CST为中国标准时间(China Standard Time UTC+8:00)

time.time()	返回从计算机元年至当前时间的秒数的浮点数(UTC时间为准)
time.sleep(secs)	让程序按给定秒数的浮点数睡眠一段时间 
time.gmtime([secs]) 用给定秒数转换为用UTC表达的时间元组(缺省返回当前时间元组) 
time.asctime([tuple])将时间元组转换为日期时间字符串 
time.mktime(tuple) 将本地日期时间元组转换为新纪元秒数时间(UTC为准) 
time.localtime([secs]) 将UTC秒数时间转换为日期元组（以本地时间为准) 


系统模块 sys
    此模块都是运行时系统的信息
    1.搜索程序运行时的路径(当前路径)
    2.sys.path 提供的路径
    3.搜索内置模块



随机模块 random
	作用:用于模拟或生成随机输出的模块

包 package
    包是将模块以文件夹的组织形式进行分组管理的方法
    作用:
        将一系列模块进行分类管理,有利于访问名冲突
        可以在需要的时候加载一个或部分模块,而不是全部模块

__init__.py 文件
    __init__.py是常规包内必须存放的文件
    __init__.py会在包加载时被自动调用
    作用:
        编写此包的内容
        在内部填写包的文档字符串

包的导入语法:
    #同模块的导入规则相同
    import 包名 [as 包别名]
    import 包名.模块名 [as 模块新名]
    import 包名.子包名.模块名 [as 模块新名]
    from 包名 import 模块名 [as 模块新名]
    from 包名.子包名 import 模块名 [as 模块新名]
    from 包名.子包名.模块名 
    import 属性名 [as 属性新名]
    from 包名 import *
    from 包名.子包名 import *
    ...

__init__.py 内的__all__列表
	作用:
		用来记录此包中有哪些包或模块需要在from import * 语句导入时被导入
	说明:
		__all__列表只在from xxx import *语句中起作用

包的相对导入
    指包内模块的相互导入
    语法:
        from 相对路径包或模块 import 属性或模块
        或
        from 相对路径包或模块 import *
    说明:
        包的相对导入不能用于import xxx 语句中

相对路径:
        .代表当前目录
        ..代表上一级目录
        ...代表上两级目录
        ....以此类推
    注意:相对导入时不能超出包的外部

包的加载路径:
    同模块的加载路径搜索
        1.搜索当前路径
        2.搜索sys.path给定的路径


异常(基础)exception
	错误指由于逻辑或语法等导入一个程序无法正常执行的问题
	特点:有些错误是无法预知的
	异常是程序出错时标识的一种状态
	当异常发生时,程序不会再向下执行,而转去调用此函数的地方,待处理此错误并恢复为正常状态
	作用:
		用作信号,通知上层调用者有错误需要处理

try 语句
两种语法:
    try-except 语句
    try-finally 语句
	
try-except 语句
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3,错误类型4) [as 变量3]:
        异常处理语句3
    ...
    except:
        异常处理语句other
    else:
        未发生异常语句
    finally:
	#finally无论有无异常一定会执行
        最终语句

    作用:
        尝试捕获异常,将程序转为正常状态并继续执行，提高代码健壮性



try-finally 语句
    语法
        try:
            可能触发异常的语句
        finally:
            一定要执行的最终语句
			
    说明:
        1.finally子句不可以省略
        2.一定不存在except子句

    作用:
        通常用try-finally 语句来做触发异常时必须要处理的事情,无论发生与否,finally子句都会被执行
    注意:
        try-finally语句不会改变程序的状态(正常/异常)



raise 语句
    触发一个错误,让程序进入异常状态
    raise 异常类型
    或
    raise 异常对象

assert 语句(断言语句)
    assert 真值表达式, 错误数据(通常是字符串)
    当真值表达式为False时,用错误数据创建一个AssertionError 类型的错误,并进入异常状态
    等同于:
        if 真值表达式 == False:
            raise AssertionError(错误数据)

异常语句:
	try-except 捕获异常,尝试接受异常通知
	try-finally 执行一定要执行的语句
	raise 发送异常通知,将程序转为异常状态(进入异常流程)
	assert 根据条件来触发AssertionError类型的异常

异常处理机制
	在程序调用层数较深时,向主调函数传递错误信息需要层层返回比较麻烦,所以用异常处理机制来解决此类问题
