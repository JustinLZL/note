迭代器 Iterator
    
	迭代器是访问可迭代对象的工具(迭代器也是一个对象)

    
	迭代器是指用iter(obj) 函数返回对象
    
	迭代器可以用next(it) 函数获取可迭代对象的数据

    

迭代器相关函数
        
iter(iterable)  
   从可迭代对象中返回一个迭代器,iterable 必须是一个能提供一个迭代器的对象
        			next(iterator)
     从迭代器iterator 中获取下一个记录,如果无法获取下一条记录,则触发StopIteration异常通知
    
	
注意:迭代器只能往前取值,不能后退



生成器 Generator
    
	生成器是能够动态提供数据的对象,生成器对象也是可迭代对象

    

生成器有两种:
    
	1.生成器函数
    
	2.生成器表达式



生成器函数定义:
    
	含有yield 语句的函数是生成器函数,此函数被调用将返回一个生成器对象
    

yield 语句:
        
	语法:
yield 表达式
        
	说明:yield 用于def 函数中,目的是将此函数作为生成器函数使用
            
	yield 用来生成数据,供迭代器的next(it) 函数使用



生成器函数说明:
    
	1.生成器函数的调用将返回一个生成器对象,生成器对象是可迭代对象
    
	2.生成器函数调用 return 会触发一个StopIteration 异常

        

用生成器函数生成一系列从0开始的整数:
        
	def myint(n):
            
	    i = 0
            
	    while i < n:
                
		yield i
                
		i += 1

        
	
	for x in myint(4):
            
	    print(x,end=' ')

        #0 1 2 3



生成器表达式:
    
	语法:(表达式 for 变量 in 可迭代对象 if 真值表达式)
    
	说明:if 子句可以省略
    
	作用:用推导式的形式生成一个新的生成器

        
		l = [2,3,5,7]
        
		lst = [x+1 for x in l]
        
		it = iter(lst)
        
		print(next(it)) #3
        
		l[1] = 30
        
		print(next(it)) #4

        
		
		l = [2,3,5,7]
        
		lst = (x+1 for x in l)
        
		it = iter(lst)
        
		print(next(it)) #3
        
		l[1] = 30
        
		print(next(it)) #31



迭代工具函数:
    
	作用:
生成一个个性化的可迭代对象

函数名                                 

函数说明:

	
zip(iter1, iter2, iter3,...)    
	
返回一个zip对象,此对象用于生成一个元组,此元组中的元素分别由iter1, iter2, iter3,...中的元组构成(元组个数由最小的可迭代对象决定)

   
     
	numbers = [10086,10010,10000,95588]
        
	names = ['中国移动','中国联通','中国电信']
        
	types = ['a','b','c','d']
        
	for i in zip(numbers, names, types):
            
	print(i)

        
	
	(10086, '中国移动', 'a')
        
	(10010, '中国联通', 'b')
        
	(10000, '中国电信', 'c')

        

	for n, a in zip(numbers, names): #等同于序列赋值
            
	print(a, '的客服电话是:', n)

        
	
	中国移动 的客服电话是: 10086
        
	中国联通 的客服电话是: 10010
        
	中国电信 的客服电话是: 10000




	enumerate(iterable, start=0)    
	
生成带索引的枚举对象,返回的迭代类型为索引-值对(index-value),默认索引从零开始,也可以用start指定

        

	for i in enumerate(names):
            
	    print(i)

        

	(0, '中国移动')
        
	(1, '中国联通')
        
	(2, '中国电信')

        

	for i in enumerate(names, 100):
            
	    print(i)

        

	(100, '中国移动')
        
	(101, '中国联通')
        
	(102, '中国电信')




字节串 bytes (AKA 字节序列)
    
	作用:存储以字节为单位的数据
    
	说明:字节串是不可变序列
        
	字节是0-255的整数
    

创建空字节串的字面值
        b = b''     
b绑定空字节串
        	    b = b""
            b = b''''''
        b = b""""""
    
创建非空字节串的字面值
      b = b'ABCD'
        b = b'\x41\x42'
    

字节串的构造函数bytes
        
	bytes()                         	等同于b''
        
	bytes(整型可迭代对象)           	用可迭代对象初始化一个字节串
        
	bytes(整数n)                    	生成n个值为0的字节串
        
	bytes(字符串, encoding='utf-8')    	用字符串的转换编码生成一个字节串

    
例:
     b = bytes()
        
	b = bytes(range(0, 255))
        
	b = bytes(10)
        
	b = bytes('你好','utf-8')



字节串的运算:
    
	+ += * *=
    
	< <= > >= == !=
    
	in / not in
    

索引和切片
函数:
    len(x) max(x) min(x) sum(x) all(x) any(x)



bytes 与 str 区别:
    
	bytes 存储字节(0-255)
    str 存储Unicode 字符(0-65535或更大)



str 与 bytes转换
        

    编码(encode)
    
str-------------->bytes
   	 b = s.encode(encoding='utf-8')

          

    解码(decode)
    
bytes-------------->bytesstr
     s = b.decode(encoding='utf-8')



字节数组 bytearray
    
	可变的字节序列

创建函数bytearray
    
	bytearray()     创建字节数组
    
	bytearray(可迭代对象)
    
	bytearray(整数n)
    
	bytearray(字符串, encoding='utf-8')



运算:
    
	+ += * *=
    
	< <= > >= == !=
    
	in / not in
    

索引和切片

字节数组的方法:
    
>>>help(bytearray)



文件　file
    
	文件是用于数据存储的单位
    
	文件通常用来长期存储数据
    
	文件中的数据是以字节为单位进行顺序存储的



文件的操作流程
    
	1.打开文件
    
	2.读/写文件
    
	3.关闭文件
        
	注意:任何的操作系统,同一个应用程序同时打开文件的数量有最大数限制,所以在用完文件后需要关闭

文件

打开函数open
    
	open(file, mode='rt')   
	用于打开一个文件,返回此文件的对象,如果打开文件失败,则会触发OSError错误



文件的操作方法:
    
	F.read()    读取文件内容形成字符串
    
	F.close()   关闭文件



mode 模式字符的含义
    
	字符              含义
    
	'r'        以只读方式打开(默认) 
    
	'w'        以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开) 
    
	'x'        创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误 
    
	'a'        以只写文件打开一个文件，如果有原文件则追加到文件末尾 
    
	'b'        用二进制模式打开 
    
	't'        文本文件模式打开 (默认) 
    
	'+'        为更新内容打开一个磁盘文件 (可读可写) 



各操作系统的换行符:
    
	Linux:      '\n'
    
	Windows:    '\r\n'
    
	Mac OS:     '\n'

说明:在文件模式下,各操作系统的换行



文件的迭代读取:
    
	open返回的文件流对象是可迭代对象
    
	示例:
    
		f = open('info.txt')
    
		for line in f:  #等同于line = f.readline()
        
		    print(line)



文本文件的写操作:
    
	'w'        以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开) 
    
	'x'        创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误 
    
	'a'        以只写文件打开一个文件，如果有原文件则追加到文件末尾 



二进制文件操作
    
	默认的文件中存储的都是以字节为单位的数据,通常有人为规定的格式,需要以字节为单位进行读写
	

F.read() 返回类型
    
		1.对于文本模式('t')打开的文件,返回字符串(str)
    
		2.对于二进制模式('b')打开的文件,返回字节串(bytes)
	

F.write(x)
    
		1.对于文本模式,x必须为字符串
    
		2.对于二进制模式,x必须为字节串



	以十六进制方式查看文件内容的命令:
    $ xxd 文件名

	

F.seek()函数
通常对二进制模式打开的文件进行操作
    
		F.seek(偏移量, 相对位置)
        
		偏移量:
            
			大于0的数代表向文件尾方向移动
            
			小于0代表向文件头方向移动
        
		相对位置:
            
			0 代表从文件头开始偏移
            
			1 代表当前位置开始偏移
            
			2 代表从文件尾开始偏移
    
	作用:
改变当前文件的读写位置

	

F.tell()函数:
    
		作用:返回当前文件读写位置



小结
文件操作的两种模式:
    
	'b': 二进制模式
    't': 文本模式


	文件操作
    
		读 read/readline/readlines
    
		写 write/writeline/writelines
	

汉字编码:
    
		国标系列:
        
			GB18030(二字节或四字节编码,共27533个汉字)
            
			GBK(二字节编码,共21003个汉字)
                
			GB2313(二字节编码,共6763个汉字)
        (Windows常用)
    
		国际标准:
        
			UNICODE32(UNICODE16)<--->UTF-8(8-bit Unicode Transformation Format)
        
			(Linux,Mac OS X,iOS,Android等常用)


	说明:Python3的字符串内部都是用UNICODE来存储字符的



	
	Python编码(encode)字符串:
    'gb2312'
    'gbk'
    'gb18030'
    'utf-8'
    'ascii'
	
	

编码注释:
在Python源文件第一行或第二行写入如下内容是要告诉解释执行器此文件的编码类型是什么
    
		如:
    # -*- coding: gbk -*-
      # 设置源文件编码格式为gbk
  
		或
     # -*- coding: utf-8 -*-
    # 设置源文件编码格式为utf-8
