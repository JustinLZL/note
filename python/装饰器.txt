1.计时器
def timer(func):
    def wrapper(*args, **kw):
        t1 = time.time()
        func(*args, **kw)
        t2 = time.time()

        cost_time = t2-t1
        print("cost {} seconds".format(cost_time))

    return wrapper

@timer
def f1(sleep_time):
    time.sleep(sleep_time)

f1()

2.用类做装饰器
class Test(object):
    def __init__(self, func):
        print('test init')
        print('func name is %s ' % func.__name__)
        self.__func = func
    def __call__(self, *args, **kwargs):
        print('装饰器中的功能')
        self.__func()
@Test
def test():
    print('this is test func')
test()



Python内置装饰器

在Python中有三个内置的装饰器，都是跟class相关的：staticmethod、classmethod 和property。
	staticmethod 是类静态方法，其跟成员方法的区别是没有 self 参数，并且可以在类不进行实例化的情况下调用
	classmethod 与成员方法的区别在于所接收的第一个参数不是 self （类实例的指针），而是cls（当前类的具体类型）
	property 是属性的意思，表示可以通过通过类实例直接访问的信息




参考链接：https://www.cnblogs.com/slysky/p/9777424.html
