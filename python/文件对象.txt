文件　file
	文件是用于数据存储的单位
	文件通常用来长期存储数据
	文件中的数据是以字节为单位进行顺序存储的

文件的操作流程
	1.打开文件
	2.读/写文件
	3.关闭文件
	注意:任何的操作系统,同一个应用程序同时打开文件的数量有最大数限制,所以在用完文件后需要关闭

文件打开函数open
	open(file, mode='rt')   
	用于打开一个文件,返回此文件的对象,如果打开文件失败,则会触发OSError错误

文件的操作方法:
	F.read()    读取文件内容形成字符串
	F.close()   关闭文件

mode 模式字符的含义
	字符              含义
	'r'        以只读方式打开(默认)
	'w'        以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
	'x'        创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
	'a'        以只写文件打开一个文件，如果有原文件则追加到文件末尾
	'b'        用二进制模式打开
	't'        文本文件模式打开 (默认)
	'+'        为更新内容打开一个磁盘文件 (可读可写) 

各操作系统的换行符:
	Linux:      '\n'
	Windows:    '\r\n'
	Mac OS:     '\n'

说明:在文件模式下,各操作系统的换行

文件的迭代读取:
	open返回的文件流对象是可迭代对象
	示例:
		f = open('info.txt')
		for line in f:  #等同于line = f.readline()
		    print(line)

文本文件的写操作:
	'w'        以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
	'x'        创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
	'a'        以只写文件打开一个文件，如果有原文件则追加到文件末尾

二进制文件操作
	默认的文件中存储的都是以字节为单位的数据,通常有人为规定的格式,需要以字节为单位进行读写
	

F.read() 返回类型
	1.对于文本模式('t')打开的文件,返回字符串(str)
	2.对于二进制模式('b')打开的文件,返回字节串(bytes)

F.write(x)
	1.对于文本模式,x必须为字符串
    2.对于二进制模式,x必须为字节串

F.seek()
	通常对二进制模式打开的文件进行操作
    F.seek(偏移量, 相对位置)
		偏移量:
			大于0的数代表向文件尾方向移动
			小于0代表向文件头方向移动
		相对位置:
			0 代表从文件头开始偏移
			1 代表当前位置开始偏移
			2 代表从文件尾开始偏移
	作用:
		改变当前文件的读写位置

F.tell()函数:
		作用:返回当前文件读写位置

文件操作的两种模式:
	'b': 二进制模式
	't': 文本模式
	文件操作
		读 read/readlines
		写 write/writeline/writelines

with 语句
    语法:
        with 表达式1 [as 变量1], 表达式2 [as 变量2], ...:
            语句块
    作用:
        使用于对资源进行访问的场合,确保使用过程中不管是否发生异常,都会执行必须的'清理'操作,并释放内存
        如:文件使用后自动关闭,线程中锁的自动获取和释放等
    说明:
        执行表达式 用as 子句中的变量绑定生成的对象
        with 语句并不必变异常的状态

环境管理器(也叫上下文管理器)
    1.类内有__enter__方法和__exit__
        实例方法的类被称为环境管理器
    2.能够用with 语句进行管理的对象必须是环境管理器
    3.__enter__将在进入with 语句时被调用,并返回由as 变量绑定的对象
    4.__exit__将在离开with 语句时被调用,且可以用参数来判断在离开with 语句时是否有异常发生并做出相应的处理


汉字编码:
国标系列:
	GB18030(二字节或四字节编码,共27533个汉字)
	GBK(二字节编码,共21003个汉字)
	GB2313(二字节编码,共6763个汉字)(Windows常用)
国际标准:
	UNICODE32(UNICODE16)<--->UTF-8(8-bit Unicode Transformation Format)(Linux,Mac OS X,iOS,Android等常用)

说明:Python3的字符串内部都是用UNICODE来存储字符的

	Python编码(encode)字符串:
    'gb2312'
    'gbk'
    'gb18030'
    'utf-8'
    'ascii'

编码注释:
	在Python源文件第一行或第二行写入如下内容是要告诉解释执行器此文件的编码类型是什么
如:
	# -*- coding: gbk -*-
	# 设置源文件编码格式为gbk
	或
	# -*- coding: utf-8 -*-
	# 设置源文件编码格式为utf-8
