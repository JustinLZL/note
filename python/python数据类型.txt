python 语言开发基础

python　程序的组成：
	程序由模块组成
		模块由语句，函数，类，数据等组成
			语句包含表达式
				表达式建立并处理数据对象

python 注释
	以#号开头，直至行尾
	#! /user/bin/python3
	
python 的核心数据类型
整型数 int
    整型数是不带小数部分的数字。包括自然数，0，及负数

整型数的字面值表达方式
	十进制
	二进制（0b开头，后跟0~1，逢二进一）
	八进制（0o开头，后跟0~7，逢八进一）
	十六进制（0x开头，后跟0~9，A~F，a~f,逢十六进一）

浮点型数 float  
	浮点型数是带有小数部分的数字。
	科学计数法：小数　e/E（正负号）指数

复数 complex  
	实部＋虚部（以j/J结尾）

布尔值 bool  
	表示真(True)和假(False)两个状态的类型
    
	真：条件满足或成立
	假：条件不满足或不成立
    
	True ==1
    False==0

空值 NoneType对象 
	None是一个不存在的特殊对象
    用来占位/变量解除绑定

表达式和运算符（也叫操作符）
	表达式expression
		由一个数字/数字和运算符组成,通常让计算机做一些事情并返回结果
	
	运算符
		算术运算符：
			+	加
			-	减
			*	乘
			/	除		#得到的结果是浮点数，不会丢弃小数部分
			//	地板除		#得到的结果向下取整
			%	求余
			**	幂运算

	运算符的优先级
    	1.**
    	2.*	/	//	%
		3.+	-

	括号分组子表达式,()内的表达式先进行运算

	混合类型自动升级
		e.g.:1+2.14返回结果为浮点数3.14
		
	is/is not运算符
		判断两个对象是否绑定同一个对象，如果是同一个对象返回True,否则返回False

变量 variable
	用来绑定数据对象的标识符
	1.变量名必须为字母或下划线开头，后跟字母或下划线或数字
	2.不能使用python的关键字（True,False,None,is,if,elif...）做变量名

赋值语句 statement
	变量名=表达式
	变量名1=变量名2=表达式
	变量名1,变量名2,...=序列

	用于创建变量并将变量绑定（或关联）在一个对象上
		1.当变量不存在时，创建该变量同时绑定在这个对象上
		2.当变量存在时，改变该变量的绑定对象
		3.一个变量只能绑定一个对象
		4.两个变量可以同时绑定同一个对象

python中　关联／绑定／引用的含义
	在python中，变量没有类型
	关联／绑定／引用都是指变量和一个对象的关联关系
	在交互模式下查看变量的绑定关系
		>>>help('__main__')

python中的自动化内存管理
python的内存管理和引用计数
	每个对象都会记录有几个变量引用自身，当引用的数量为0时，则对象被销毁，此种自动化内存管理的方式叫引用计数

基本输入输出
	基本输入函数input
		从标准输入设备上读取一段字符串，末尾的换行符会删除
        	input('提示字符串')
		返回值是输入的字符串（仅python3）
        ps:'提示字符串'可以为空

	基本输出函数print
		将一系列的值以字符串的形式输出到标准输出设备上

序列赋值的语法
	变量名1,变量名2,...=序列

变量的交换绑定
	1.经典交换算法
		temp=a
		a=b
		b=temp
	2.序列赋值
		a,b=b,a

小整数对象池
	CPython中整数[-5,256],永远存在于小整数池中,不会释放并可重复使用
		>>> a=100
		>>> b=100
		>>> a is b
    	True #因为a,b绑定的是小整数对象池中的同一个对象

id()函数
	id(obj),返回一个对象在内存的地址,常用于判断变量绑定的对象是否改变

del语句
	用于删除变量，同时删除与对象的关联关系。如果可以则释放对象
	del 变量名

数值对象的构造（创建）函数

float(obj)
    用字符串或数字转换为浮点数，如果不能出参数，则返回0
	
int(x,base=0)或int(x=0)
	用字符串或数字转换为整数，如果不能出参数，则返回0
	>>> int(2.6)
	2
	>>> int(2.9999)
    2
	>>> int(1010,2)
	Traceback (most recent call last):File "<stdin>", line 1, in <module>
	TypeError: int() can't convert non-string with explicit base
	>>> int('1010')
    1010
	>>> int('1010',2)
    10
	>>> int('1010',8)
    520

complex(r=0.0,i=0.0)
	用数字创建一个复数（实部为r，虚部为i）

bool(x)
	用x创建一个布尔值（True/False）
	返回假值的情况：
		None    	空值
		False		布尔假值
		0,0.0,0j
		''			空字符串
		()			空元组
		[]			空列表
		{}			空字典
		set()		空集合

round(number[,ndigits])
	对数值进行四舍五入，ndigits是小数向右取整的位数，负数表示向左取整	
	>>> x=123.456789
	>>> round(x,1)
	123.5
	>>> round(x,5)
	123.45679
	>>> round(x)
	123
	>>> round(x,0)
	123.0

pow(x,y[,z=None])相当于x**y[或x**y%z]

字符串 str
	用来记录文本信息
	是序列的一种
	是不可以改变的字符序列
	在非注释中，凡是用引号括起来的部分都是字符串

三引号字符串的作用
	三引号字符串中的换行会自动转换为换行符‘\n’
	三引号内可以包含单引号和双引号

用转义序列代表特殊字符
	字符串字面值中用字符反斜杠'\'后跟一些字符代表特殊的一个字符
	\'          代表一个单引号(')
	\"          代表一个双引号(")
	\\          代表一个反斜杠(\)
	\n          换行
	\r　　      返回光标至行首
	\f　　      换页
	\v          垂直制表符
	\b　　      倒退
	\0          空字符(字符值为零)
	\0oo        oo为两位八进制表示的字符
	\xXX        XX为两位十六进制表示的字符
	\uXXXX      UNICODE16的十六进制表示的字符
	\UXXXXXXXX  UNICODE32的十六进制表示的字符

ASCII编码
	查看ASCII编码表：
	>>>man acsii

常用的ASCII编码：
	字符    十进制　　　　十六进制
	'0'       48     	 0x30
	'A'       65     	 0x41
	'a'       97      	 0x61

raw字符串(原始字符串)
	使得转义符号　\　无效
	r'字符串内容'
	r"字符串内容"
	r'''字符串内容'''
	r"""字符串内容"""

字符串的运算
	+       拼接字符串
	*       生成重复的字符串（只能和整数相乘）

in/not in
    in用于序列，字典，集合等容器类中，判断某个值是否存在，如存在返回True，反之False
		obj　in　seq

字符串的索引 index
	字符串[整数表达式]
	正向索引	从0开始，最后一个为len(s)-1
	反向索引	从-1开始，-1代表最后一个元素，第一个元素为-len(s)

切片 slice
	从字符串序列中取出一部分相应的元素重新组成一个字符串
	字符串[(开始索引):(结束索引)｛:(步长)｝]
		｛　｝内可省略
	开始索引是切片开始切下的位置0代表第一个元素，-1代表最后一个元素
	结束索引是切片的终止索引(但不包含终止索引)
	步长是切片每次获取完当前索引后移动的方向和偏移量
	    1.没有就默认为１
		2.当步长为正整数时，正向切片
		3.当步长为负整数时，反向切片，默认的起始位置为最后一个元素，默认终止位置为第一个元素的前一个位置
    	>>> s='abcde'
		>>> s2=s[::-1]
		>>> s2
    	'edcba'

字符串编码(encode)的转换函数(一次均只能输入一个字符或编码)
	ord(c)
		返回一个字符的unicode值
	chr(i)
		返回i这个值所对应的字符
	>>> ord('中')
		20013
	>>> chr(20013)	
	'中'

整数转换为字符串的函数：
	hex(i)      将整数转换为十六进制的字符串
	oct(i)      将整数转换为八进制的字符串
	bin(i)      将整数转换为二进制的字符串

字符串的构造函数str
	str(obj='') 
	对象转换为字符

常用的字符串方法
字符串的文本解析方法 split和join方法
	S.split(sep=None)
		以sep作为分隔符分割S字符串，并返回分割后的字符串列表；当不给定参数时，默认使用空白字符作为分割符分割
	S.join(iterable)
		用可迭代对象中提供的字符串，返回一个中间用Ｓ进行分割的字符串

方法的调用语法：
	对象.方法名(方法传参)				方法说明	
	S.isdigit()						判断字符串中的字符是否全为数字 
	S.isalpha()						判断字符串是否全为英文字母 
	S.islower()						判断字符串所有字符是否全为小写英文字母 
	S.isupper()						判断字符串所有字符是否全为大写英文字母 
	S.isspace()						判断字符串是否全为空白字符 
	S.center(width[,fill])			将原字符串居中，左右默认填充空格 
	S.count(sub[, start[,end]])		获取一个字符串中子串的个数
	S.find(sub[,start[,end]])		获取字符串中子串sub的索引,失败返回-1
	S.strip()						返回去掉左右空白字符的字符串
	S.lstrip()						返回去掉左侧空白字符的字符串
	S.rstrip()						返回去掉右侧空白字符的字符串
	S.upper()						生成将英文转换为大写的字符串
	S.lower()						生成将英文转换为小写的字符串
	S.replace(old, new[, count])	将原字符串的old用new代替，生成一个新的字符串
	S.startswith(prefix[, start[, end]]) 返回S是否是以prefix开头，如果以prefix开头返回True,否则返回False 
	S.endswith(suffix[, start[, end]]) 返回S是否是以suffix结尾，如果以suffix结尾返回True,否则返回False 

	以下是不常用的
	S.title()               生成每个英文单词的首字母大写字符串
	S.isnumeric()           判断字符串是否全为数字字符 

字符串格式化表达式
	运算符
    	%
    生成一定格式的字符串
		格式字符串　%　参数值
		格式字符串　%　(参数值1,参数值2,...)
	格式字符串中的'%'为占位符，占位符的位置将用参数值替换

格式化字符串中的占位符和类型码		占位符意义
	%S        字符串，使用str函数转换
	%r　　    字符串，使用repr函数转换
	%c　　    整数转为单个字符
	%d　　    十进制整数
	%o        八进制整数
	%x,X　　　十六进制整数(a-f)(A-F)
	%e,E      指数型浮点数(e)(E)
	%f,F      浮点型十进制形式
	%g,G　　　十进制形式浮点数或指数浮点数自动转换
	%%　　　　  '%'

	占位符和类型码之间的格式语法
		%[- + 0 宽度.精度] 类型码
			-　左对齐(默认右对齐)
			+　显示正号
			0　左侧空白位置补零
			宽度：整个数据输入的宽度
			精度：保留小数点后多少位(默认是６位)

list 列表
	是一种容器
	是序列的一种
	是可以被改变的序列
	是可迭代对象
	由一系列特定的元素组成，元素与元素之间可以没有任何关联关系，但有先后顺序之分
		L=[]　		＃空列表
		list()          #[]
		
list(iterable)  用可迭代对象创建一个列表
	L = list('joe') #L绑定['j','o','e']
	L = list(range(1,10,2)) #L绑定[1, 3, 5, 7, 9]

列表的运算
	+   拼接列表
	+=  用原列表与右侧列表拼接，用变量绑定拼接后的列表
	*   生成重复的列表
	*=  

列表的比较运算
	<  
	<= 
	> 
	>= 
	== 
	!=

in / not in
	判断一个值是否存在于列表中。
	
in:如存在返回True,否则False
not in:与in相反

列表的索引操作
	列表[整数表达式]
	规则与字符串规则一致

列表的索引赋值
	列表是可变的，可以通过索引赋值来改变列表中的元素

列表的切片
	列表[:]
	列表[::]
	列表的切片返回一个列表，规则等同于字符串切片规则
    
	>>> x=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	>>> x[1:3] #[1, 2]
	>>> x[1::3] #[1, 4, 7]

切片赋值
	列表[切片slice] = 可迭代对象
    可改变原列表的排序，可以插入数据好修改数据
    可用切片改变列表对应的元素的值
    切片的赋值运算符(=)的右侧必须是一个“可迭代对象”

切片注意事项：
    对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的数据元素的个数一定要等于切片切出的段数

del语句
    用来删除列表元素
	del　列表[索引]
	del　列表[切片]
	
	>>> l=[3,5]
	>>> l[1:1]=[4]
	>>> l[0:0]=[1,2]
	>>> l
	[1, 2, 3, 4, 5]
	>>> l[5:]=[6]
	>>> l
	[1, 2, 3, 4, 5, 6]
	>>> l[:]=l[::-1]
	>>> l
	[6, 5, 4, 3, 2, 1]
	>>> del l[-1]
	>>> l
	[6, 5, 4, 3, 2]

python3中常用的序列函数
	len(x)    返回序列的长度
	max(x)    返回序列的最大值元素
	min(x)    返回序列的最小值元素
	sum(x)    返回序列中所有元素的和
	any(x)    真值测试，如果列表中的其中一个元素是真值，则返回真
	all(x)    真值测试，如果列表中的所有元素都是真值，则返回真

python3中常用的列表方法(method)
	详见>>>help(list)

sorted函数
    用于生成一个排序后的列表
	sorted(iterable,key=value,reverse=False)

reversed(seq) 
	返回原序列反序的可迭代对象

深拷贝deep copy和浅拷贝shallow copy
	浅拷贝
		指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象
		L = [3.1, 3.2]
		L1 = [1, 2, L]
		L2 = L1.copy()
		print(L1) #[1, 2, [3.1, 3.2]]
		print(L2) #[1, 2, [3.1, 3.2]]
		L[0] = 3.14
		print(L1) #[1, 2, [3.14, 3.2]]
		print(L2) #[1, 2, [3.14, 3.2]]

	深拷贝
    对所有可变对象进行层层复制，实现对象的各自独立
		import copy #导入复制模块
		L = [3.1, 3.2]
		L1 = [1, 2, L]
		L2 = copy.deepcopy(L1) #实现深拷贝
		print(L1) #[1, 2, [3.1, 3.2]]
		print(L2) #[1, 2, [3.1, 3.2]]
		L[0] = 3.14
		print(L1) #[1, 2, [3.14, 3.2]]
		print(L2) #[1, 2, [3.1, 3.2]] #此列表不受影响

方法
	深拷贝
		import copy
		L2 = copy.deepcopy(L)
	浅拷贝
		L2 = L.copy()
		L2 = L[::]
	不拷贝
		L2 = L

列表推导式　list comprehension
	列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
	作用：用简易方法生成列表，效率更高
		[表达式　for　变量　in　可迭代对象 {if　真值表达式}]

列表推导式的嵌套:
		[表达式  for 变量１　in　可迭代对象１　if　真值表达式１
            for 变量２　in 可迭代对象２　if　真值表达式２
			...]

元组　tuple
	元组是不可改变的序列，是可以存放任意类型的容器
	用()括起来，单个元素后加','以区分单个对象还是元组
	t=() #空元组
	t=200,
	t=(200,)

元组的构造(创建)函数　tuple
	tuple() 生成一个空的元组
	tuple(iterable) 用可迭代对象生成一个元组
    
元组不支持切片赋值和索引赋值

t.index(v[, begin[, end]])  返回对应元素的索引，v不存在时触发ValueErorr错误
t.count(x)  返回元组中对应元素的个数

序列的种类：
	字符串str , 列表list , 元组tuple
    字节串bytes , 字节数组bytearray

能用于序列的函数总结
	len(x) , max(x) , min(x) , sum(x) , any(x) , all(x)

str(obj) 将对象转为字符串
list(iterable) 将可迭代对象转为列表
tuple(iterable) 将可迭代对象转为元组
reversed(seq) 返回反向顺序的可迭代对象
sorted(iterable,key=value,reverse=False)  默认正序排序

字典 dict
	一种可变的容器，可以存储任意类型的数据，存储是无序的
	每个数据都是以键key:值value对形式进行映射存储
	键不能重复，而且只能用不可变类型作为字典的键
	每个数据都是用键进行索引
	d={} #空字典
	d={'name':'joe','age':23,'hobby':'basketball'}

字典的构造函数　dict
	dict()  #创建空字典
	dict(iterable)  用可迭代对象初始化一个字典
	dict(**kwargs)  关键字传参形式生成一个字典
	
	d=dict([('name','joe'),('age',23)])
	d=dict(name='joe',age=23)

字典的基本操作
	字典的键索引
    用［］运算符可以获取和修改键所对应的值
		键索引赋值（字典[键]＝值）
		当键不存在时，创建键并绑定键对应的值
		当键存在时，修改键绑定的对象
		
	删除字典的元素
		del 字典[键]

字典的迭代访问：
	字典是可迭代对象，字典只能对键进行迭代访问

可以用于字典的内建(built-in)函数
	len(x)  返回字典的键值对的个数
	max(x)  返回字典的键的最大值
	min(x)  返回字典的键的最小值
	sum(x)  返回字典的键的和
	any(x)  如果字典中的一个键为真，则返回真
	all(x)  如果字典中所有键为真，则结果才返回真


利用字典进行词频统计
s = input('enter')
#去重复
l = []  #此列表用来存储出现过的字符
for ch in s:
    if ch not in l: #第一次出现
	l.append(ch)
print('去重后的列表：', l )
for ch in l:
    print(ch, ':', s.count(ch), '次')

s = input('enter')
d = {}  #字典的键为出现过的字符，值为出现的次数
for ch in s:
    if ch not in d:
        d[ch] = 1   #添加该字符到字典中，次数设置为1
    else:   #ch不是第一次出现
	d[ch] += 1
for ch in d:
    print(ch, ':', d[ch], '次')

字典推导式
	用可迭代的对象依次生成字典的表达式
		｛　键表达式：值表达式　for　变量　in　可迭代对象　［if  真值表达式］｝
		[]的内容可省略
	1.先从可迭代对象中取值
	2.用变量绑定
	3.用if进行条件判断，如果为真值则执行下一步
	4.执行＇键表达式＇和＇值表达式＇然后加入新字典中
		d = {x: x **2 for x in range(1,10)}

字典推导式可嵌套，语法同列表推导式

字典　vs　列表
1.都是可变对象
2.索引的方式不同，列表用整数索引，字典用键索引
3.字典的查找速度可能会快于列表(由于存储原理)
4.列表的存储是有序的，字典的存储是无序的　

列表和字典的内部存储原理
	列表顺序存储
    字典映射存储
	
集合　set
	可变容器，其内数据对象都是唯一的（不能重复）
	是无序的存储结构，数据没有先后顺序
	集合内的元素必须是不可变的对象
	可迭代,相当于只有键没有值的字典

集合的构造函数
	set() #空集合
	s={1,2,3}
	s(iterable) 用可迭代对象创建一个新的集合

集合的运算
交集 &
    s1 = {1,2,3}
    s2 = {2,3,4}
    s3 = s1 & s2 #s3 = {2,3}
并集 |
    s1 = {1,2,3}
    s2 = {2,3,4}
    s3 = s1 | s2 #s3 = {1,2,3,4}
补集 -
    s1 = {1,2,3}
    s2 = {2,3,4}
    s3 = s1 - s2 #s3 = {1}
对称补集 ^
    s1 = {1,2,3}
    s2 = {2,3,4}
    s3 = s1 ^ s2 #s3 = {1,4}
子集 <
    s1 = {1,2,3}
    s2 = {2,3}
    s2<s1 #True　s2是s1的子集
超集 >
    s1 = {1,2,3}
    s2 = {2,3}
    s1>s2 #True  s1是s2的超集
	
== != 判断集合是否相同
<= >= 判断包含，被包含关系

集合和字典的优点
	in/not in 运算符的查找速度快

集合的内建函数操作
	len(x),max(x),min(x),sum(x),any(x),all(x)

集合推导式
    用可迭代对象生成集合的表达式
	{表达式　for　变量 in 可迭代对象 [if 真值表达式]}
	[]内可省略

固定集合frozenset
	固定集合是不可变的，无序的，含有唯一元素的集合
	固定集合可以作为字典的键，也可以作为集合的值

创建空的固定集合：
    	fz = frozenset()

创建非空的固定集合：
    frozenset(iterable)

字节串 bytes (AKA 字节序列)
	作用:存储以字节为单位的数据
	说明:字节串是不可变序列
	字节是0-255的整数
    
创建空字节串的字面值
	b = b''     
b绑定空字节串
	b = b""
	b = b''''''
	b = b""""""
创建非空字节串的字面值
	b = b'ABCD'
	b = b'\x41\x42'
    
字节串的构造函数bytes
	bytes()								等同于b''
	bytes(整型可迭代对象)				用可迭代对象初始化一个字节串
	bytes(整数n)						生成n个值为0的字节串
	bytes(字符串, encoding='utf-8')	用字符串的转换编码生成一个字节串

例:
	b = bytes()
	b = bytes(range(0, 255))
	b = bytes(10)
	b = bytes('你好','utf-8')

bytes 与 str 区别:
	bytes 存储字节(0-255)
    str 存储Unicode 字符(0-65535或更大)

str 与 bytes转换

    编码(encode)
str-------------->bytes

b = s.encode(encoding='utf-8')

      解码(decode)
bytes-------------->bytesstr

s = b.decode(encoding='utf-8')


字节数组 bytearray
	可变的字节序列

创建函数bytearray
	bytearray()     创建字节数组
	bytearray(可迭代对象)
	bytearray(整数n)
	bytearray(字符串, encoding='utf-8')

运算:
	+ += * *=
	< <= > >= == !=
	in / not in

字节数组的方法:
>>>help(bytearray)

