逻辑结构

if语句
	让程序根据条件选择性地执行某条语句或某些语句
		if　真值表达式：
		    语句块１...
		elif 真值表达式２：
		    语句块２
        ...
		else:
		    语句块３
	elif子句也可以有一个或多个，也可以没有
	else子句最多只有一个，也可以没有

if语句嵌套
	if语句可以作为语句嵌套到另一个语句的内部
    条件表达式
		表达式１　if　真值表达式　else 表达式２
	根据真值表达式的取值（True/False）来决定执行表达式１还是表达式２，并返回相应的结果
    
	e.g.:满100减20
		m=int(input(''))
		n=m-20 if m>=100 else m
		print(n)

循环语句
	while　语句
    根据一定条件，重复执行一条或多条语句
		while 真值表达式：
		    语句块1
		else:
		    语句块２
    
	1.先执行真值表达式１，测试布尔值是否为True
	2.如果真值表达式的值为True,则执行语句１，然后返回第一步，重复测试
	3.如果真值表达式的值为False,则执行语句2，然后结束。若无else子句，则直接结束
    4.else子句可省略
    
	注意事项：
		1.要控制循环的真值表达式的值来防止死循环
		2.通常用真值表达式内的循环变量来控制循环条件
		3.通常在循环语句块内改变循环变量来控制循环的次数和变量的走向

	while语句嵌套：
        可嵌入if语句和while语句
		while 真值表达式：
		    ...
		    while 真值表达式２：
			...
		    else:
		        ...
		else:
		    ...

break 语句
    用于循环语句(while、for)中，终止当前循环语句的执行
	1.当break语句执行后，break之后的语句将不再执行
	2.break语句一般和if语句组成使用
	3.break语句终止循环时，循环语句else子句不会被执行
    4.break语句只能终止当前循环语句的执行，不会跳出嵌套
    5.break语句只能用于循环语句(while,for)内部使用

for　语句
    用来遍历可迭代对象的数据元素
	可迭代对象是指能够依次获取元素的对象
	可迭代对象:
        str
        list
        tuple
        dict
        set
        range函数返回的对象等

    for 变量列表　in 可迭代对象：
        语句块１
    else:
        语句块２

	注意事项：
		i = 6
        for x in range(1,i):
		    print('x=',x,'i=',i)
		    i -= 1
        out:
            x= 1 i= 6
            x= 2 i= 5
            x= 3 i= 4
            x= 4 i= 3
            x= 5 i= 2

range函数
    用来创建一个生成一系列整数的可迭代对象

continue 语句
	用于循环语句(while,for)中，不再执行本次循环continue之后的语句，重新开始一次新的循环
	在for语句中执行continue语句，将会从可迭代对象中取下个元素，绑定变量后再次开始执行
	在while语句中执行continue语句，将会直接跳转到while语句的真值表达式，重新判断循环条件

