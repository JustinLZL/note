1.CSS介绍
	Cascading Style Sheets  层叠样式表
	1.作用:为元素设置样式,美化页面
	2.用法:
		1.内联样式(行内样式)
			语法:嵌入在标签内
				<标签 style="CSS样式规则"></标签>
				样式规则 属性名:属性值
				 	e.g.width : 200px;
		2.常用属性
			width : 取数值,单位为像素px
			height : 取数值,单位为像素px
			background-color : 背景颜色
			color : 取颜色值,设置文本颜色
			font-size : 取数值,设置字体大小,单位为px
			font-weight:设置字体为粗体,取值bold
		3.文档内嵌方式
			使用<style></style>来引入CSS样式,常写在<head></head>标签中
			标签内容就是样式规则
			语法:
				<style>
					div{
						width:300px;
						height:300px;
						...
					}
				</style>
				#选择文档中的div元素为其设置样式
			CSS选择器:
				由选择符/器和样式规则组成
				选择符用来规范页面中哪些元素需要设置样式
				样式规则:具体的样式声明
		4.外链方式引入CSS代码
			1.创建外部的CSS文件 index.css
			2.使用<link rel="stylesheet" href="url">,书写在<head></head>标签中
			3.样式表中采用选择器声明样式
		5.CSS样式表的特点:
			1.层叠性
				可以对同一个元素设置多个不同的样式规则,共同起作用
			2.继承性
				子元素可以继承父元素中设置的样式
				例如:块元素的默认宽度与父元素保持一致,所有的文本属性(字体的大小,粗细,颜色等)都可以被继承
				*a(超链接)标签不受父元素影响
			3.优先级
				在样式声明发生冲突的时候需要考虑优先级
					浏览器默认样式  			低
					文档内嵌/外链形式引入		中
					(这两种形式发生样式冲突时,根据代码书写顺序,写在后的优先级更高)
					行内样式					高

2.CSS选择器(重点)
	1.作用:规范页面中哪些元素可以设置样式
	2.分类:
		1.标签选择器
			标签名{
				属性1:值;
				属性2:值;
				...
			}
			作用:根据标签名在文档中匹配所有该元素,并为其添加样式
		2.id 选择器
			作用:根据元素id属性值进行匹配
			<标签 id="id值"></标签>
			#id值{
				属性1:值;
				...
			}
			特点:
				1.命名规则:id值不能以数字和下划线开头,推荐以英文字母开头
				2.选择符以#开头,后跟id值
				3.id属性具有唯一性
				4.id属性常用于划分外围结构
		3.类选择器
			作用:根据元素的class属性值进行匹配,可以实现样式的复用
			<标签 class="class值"></标签>
			.class值{
				属性1:值;
				...
			}
			特点:
				1.命名规则:class值不能以数字和下划线开头,推荐以小写英文字母
				2.以.开头,后跟class值
				3.允许重复使用class值,实现样式复用
			特殊用法:
			1.class属性值可以出现多个,使用空格隔开
			2.组合使用,缩小匹配元素范围
				p.orangeText表示p元素中查找类名为orangeText的元素
				注意:标签选择器与其他选择器组合,标签名一定要写在前面
		4.群组选择器
			为一组元素共同设置样式
			body,h1,p{
				margin:0;
			} #设置当前元素外边距为零,即取消外边距
		5.后代选择器
			为后代元素设置样式
			父元素 子元素{
				属性1:值
				...
				}
			注意:
				1.父元素与子元素之间使用空格隔开
				2.子元素包含直接子元素和间接子元素
		6.子代选择器
			用来匹配父元素中指定的直接子元素
			父元素>子元素{
				属性1:值
				...
			}
		7.通配符选择器
			* 表示匹配文档中所有元素
			*{
				margin:0;
				padding:0;
			}
			设置文档中所有元素的内外边距为0
		8.伪类选择器	
			为元素的不同状态设置样式
			以:开头
			1.分类:
				超链接伪类选择器
				动态伪类选择器
			2.超链接伪类选择器
				:link表示超链接未被访问时的状态
				:visited表示超链接被访问过后的样式
			3.动态伪类选择器
				:hover 鼠标悬停在元素上时的状态
				:active 鼠标点按元素时的状态
				:focus 元素获取到焦点时的样式,常见于输入框
			4.如果给超链接设置四种状态的样式,必须按照以下顺序书写伪类
				a:link
				a:visited
				a:hover
				a:active
		9.选择器的优先级
			根据选择器的权重(/权值)进行优先级判断
										权重
			id选择器 					100
			class选择器/伪类选择器 		 10
			标签选择器					  1
			注意:
				1.组合选择器的权重由各个选择器的权重相加而得
				2.选择器的优先级只跟权重有关,与书写顺序无关
				3.行内样式的优先级最高,所以在行内设置的相关属性不会用到选择器
				
3.尺寸与边框
	1.尺寸单位:
		1.px	像素 最常用的单位,也是浏览器默认单位
		2.%		百分比 占据父元素对应属性的占比
		以下为绝对单位,相对不常用
		3.in 	英寸  1 in = 2.54 cm
		4.pt 	镑	  1 pt = 1/72 in
		5.cm 	厘米
		6.mm 	毫米
		注意:css中的尺寸单位是不能省略的,0除外
	2.颜色取值:
		1.单词
		2.十六进制 #123456
			每两位一组代表一种三原色,对应红绿蓝
		3.短十六进制 #123
			由三位组成,每一位对应红绿蓝
			浏览器在渲染时会自动对每一位进行重复,补全成六位的十六进制
				e.g.	#123 == #112233
		4.css提供的颜色表示方法
			1.rgb(r,g,b) 每个值取值(0-255)
				e.g.	rgb(255,0,0) #红色
			2.rgba(r,g,b,alpha) alpha:透明度 取值(0-1)即(透明-不透明)
	3.尺寸属性
		1.作用:改变元素的宽度和高度
		2.使用:
			1.所有的块级元素可以设置宽高,默认情况下宽度继承父元素,高度由内容决定
			2.所有的行内元素不能设置宽高,大小由内容决定
		3.内容溢出处理
			属性:overflow
			取值:
				1.visible 默认值,溢出部分可见
				2.hidden 溢出部分隐藏不可见
				3.scroll 设置内容滚动显示,显示水平,垂直两个方向的滚动条,占用自身宽高,不影响其他元素的布局
				4.auto 当内容溢出时,自动添加滚动条并且可用.根据需要添加水平,垂直方向的滚动条
	4.边框
		1.属性 border
		2.取值(三个值缺一不可) border-width border-style border-color
			e.g.	border:5px solid red
			1.border-width:设置边框线的宽度
			2.border-style:设置边框线的样式,取值:
				1.solid 实线
				2.dashed 虚线
				3.dotted 点线
				4.double 双线(不常用)
			3.border-color:颜色值,可以使用transparent表示透明色
		3.特殊用法
			取消边框 border:none;
		4.单边框设置:
			border 属性用来设置 上右下左四个方向的边框
			四个方向单独设置边框:
			border-top:5px solid red;
			border-right:10px solid green;
			border-button:4px solid gray;
			border-left:1px solid blue;
		5.网页三角标制作
			1.元素尺寸为0
			2.为元素添加四个方向的边框
			3.设置其中三条边框颜色为透明(transparent)
		6.圆角边框
			属性:border-radius
			取值:px 或 %
			作用:将边框的直角变成圆角
			e.g.	
				border-radius:10px; #四个角都按照10px的半径去生成圆角
				border-radius:5px 10px 15px 20px; #四个值表示上右下左四个角
				border-radius:10px 20px; #第一个值表示上下,第二个值表示左右
				border-radius:5px 10px 15px; #第四个值默认跟第二个值一致
			注意:圆角边框在元素不设置边框的情况下依然有效,可以通过设置50%呈现圆形或椭圆形
		7.边框阴影
			属性:box-shadow : h-offset/v-offset/blur/spread/color;
			h-offset:阴影的水平偏移距离
				取值为数字
				取值为正,阴影向右偏移
				取值为负,阴影向左偏移
			v-offset:阴影的垂直偏移距离
				取值为数字
				取值为正,阴影向下偏移
				取值为负,阴影向上偏移
			blur:阴影的模糊程度,取值越大越模糊
			spread:阴影扩大或是缩小的距离
				取值为数字
				取值为正,阴影会扩大
				取值为负,阴影会收缩
			color:设置阴影的颜色
		8.浏览器坐标系
			浏览器左上角为原点,向右向下为正方向
4.盒模型/框模型
	1.元素皆为框
		盒模型:元素在文档中占据尺寸的计算方式
		组成:
			1.外边距margin
			2.边框border
			3.内边距padding
			4.内容尺寸
		计算方式:
			标准盒模型:
				最终width = 左右外边距+左右边框+左右内边距+内容宽度
				最终height = 上下外边距+上下边框+上下内边距+内容高度
	2.外边距margin
		1.元素边框与边框之间的距离
		2.语法:
			1.属性margin
			2.取值
				margin:10px; #四个方向都设置10像素的外边距
				margin:10px 20px; #上下设置10像素,左右设置为20像素的外边距
				margin:10px 20px 30px; #上下分别设置10像素,30像素;左右设置为20像素的外边距
				margin:10px 20px 30px 40px; #上下分别设置10像素,30像素;左右设置为20像素,40像素的外边距

			3.特殊值
				margin:auto; #自动
				margin: 0 auto; #可以用来设置元素居中
			4.margin 取值可以分正负
				正值 #正方向
				负值 #负方向
			5.四个方向单独设置外边距
				margin-top
				margin-right
				margin-bottom
				margin-left
				取值同样是数值
			6.具有默认外边距的元素
				body(默认为8),hn,p,ul,ol{
					margin :0;
				} #取消元素的外边距
	3.内边距padding
		1.表示元素内容与元素边框之间的距离
			通过设置width height属性,实际上设置的是元素内容框的大小
		2.使用:
			1.属性 padding
			2.取值 数值,可以给定1/2/3/4个值
				padding :2px; #上右下左都为2px的内边距
				padding :2px 4px; #上下为2px的内边距,左右为4px的内边距
				padding :2px 4px 6px; #上2px下6px的内边距,左右为4px的内边距
				padding :2px 4px 6px 8px; #上2px下6px的内边距,左4px右8px的内边距
		3.具有默认内边距的元素
			ol,ul,input(文本框,密码框,按钮)
			ol,ul,input{
				padding:0;
			} 
			页面开发时,清除浏览器的默认边距
			body,ul,ol,hn,p{
				margin:0;
				padding:0;
			}
			input 可以根据需求单独设置

	4.盒模型属性的支持度
		1.盒模型属性:margin border padding width height
		2.块元素对盒模型属性完全支持
		3.行内元素对盒模型属性部分支持
			可设置:左右的内外边距
			不可设置:宽高,上下的内外边距
	5.元素类型转换
		属性 display
		取值
			inline 行内元素
			block 块元素
			inline-block 行内块元素
			none 元素隐藏
	6.文本居中显示
		水平居中:text-align:center;
		垂直居中:设置元素 height与行高line-height保持一致