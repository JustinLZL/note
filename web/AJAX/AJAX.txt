1.AJAX - Asynchronous Javascript And Xml
		异步的		JS 			和 Xml

*现在很少用Xml,主流是JSON

同步访问:当客户端向服务器发送请求时,服务器在处理过程中,浏览器只能等待
	缺点:整个网页都会刷新
异步访问:当客户端向服务器发送请求时,服务器在处理的同时,浏览器可以处理其他事情,不需要一直等待,效率较高
	优点:局部刷新

使用场合:
	1.搜索建议
	2.表单验证
	3.前后端完全分离

2.AJAX核心对象 异步对象 - XMLHttpRequest
	1.XMLHttpRequest
		主要称为"异步对象",代替浏览器向服务器发送请求并接收响应
		该对象主要由JS来提供
	2.创建异步对象
		主流的异步对象是XMLHttpRequest类型的,并且主流浏览器(IE7+,Chrome,FireFox,Safari,Oper)已经全部支持该对象.低版本浏览器中是无法使用XMLHttpRequest的,需要使用ActiveXObject来创建异步对象

		判断浏览器是否支持XMLHttpRequest
			if(window.XMLHttpRequest){
				//如果浏览器支持XMLHttpRequest的话,window.XMLHttpRequest则是一个非undefined的值
				//如果浏览器不支持XMLHttpRequest的话,window.XMLHttpRequest则是一个undefined

				var xhr = new XMLHttpRequest();
			}else{
				//浏览器不支持XMLHttpRequest
				var xhr = new ActiveXObject("Microsoft.XMLHTTP");
			}
	3.xhr的成员
		1.方法 - open()
			作用:创建/打开请求
			语法:xhr.open(method,url,asyn)
				method:指定请求的方式,取值'get'或'post'
				url:请求地址,字符串
				asyn:指定是否使用异步的方式发送请求
					true:使用异步
					false:使用同步
				e.g.
					//1.获取xhr对象
					var xhr = createXhr()
					//2.创建请求
					xhr.open('get','/01_server/',true);
		2.属性 - readyState
			作用:请求状态,通过不同的请求状态来表示xhr与服务器的交互情况
				由0-4共5个值表示5个不同的状态
				0:请求尚未初始化
				1:已经与服务器建立连接
				2:服务器端已经接收请求
				3:请求正在处理中(仍未响应)
				4:响应已完成
		3.属性 - status
			作用:表示的是服务器端的响应状态码
				200:表示服务器正确处理所有的请求并给出响应
				403:请求被拒绝
				404:请求资源未找到
				500:服务器内部错误
		4.属性 - responseText
			作用:服务器端响应回来的文本
		5.事件 - onreadystatechange
			作用:每当readyState的值发生改变时就要触发的操作 - 回调函数
			在此函数中,要判断readyState=4且status=200时,才可以正常地接收响应数据(responseText)
		6.方法 - send()
			作用:发送请求
			语法:xhr.send(body)
				body:表示请求主体
					请求为get,此处为null
					请求为post,此处为要提交的数据
						e.g.:send("参数1=值1&参数2=值2")
		7.setRequestHeader(name,content)
			设置请求消息头
			*注意:该操作必须在xhr.send()之前增加
			e.g.:xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
	4.使用AJAX发送get请求
		1.步骤
			1.创建xhr对象
			2.创建请求 - open()
			3.设置回调函数 - onreadystatechange
			4.发送请求 - send()
		2.发送带参数的get请求
			在请求地址中追加参数即可
			xhr.open('get',"/02_server/?uname=Jenny",true);
	5.使用AJAX发送post请求
		1.步骤
			1.创建/获取 xhr对象
			2.创建请求 - open()
			3.设置回调函数 - onreadystatechange
			4.发送请求 - send()
				xhr.send("uname=Jenny&upwd=123456");
		2.csrf验证
			必须手动提交csrfmiddlewaretoken 的值到服务器,否则无法通过csrf的验证,服务器会返回403
			解决方案1:
				1.在模板中,通过JS获取cookies中csrftoken的值
				2.将获取出来的值,拼成参数,再发送给服务器
				3.必须设置一个请求消息头 - Content-Type
					xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
					*注意:该操作必须在xhr.send()之前增加
			解决方案2:
			    {% csrf_token %}
				var csrf = $("[name='csrfmiddlewaretoken']").val();

3.JSON
	1.JSON介绍
		JSON:JavaScript Object Notation
				JS 		 对象	表现形式
		将复杂的数据按照JS对象的格式进行响应
	2.JSON表现
		1.JSON可以表示单个对象
			1.使用 {} 表示单个对象
			2.在{}中,使用key:value的形式来表示数据(属性)
			3.key必须使用""引起来
			4.value如果是字符串,也必须使用""引起来
			var obj = {
				"name":"dd",
				"age":23,
				"gender":"male",
			}
		2.JSON可以表示一个数组
			1.使用 [] 表示一个数组
			2.在数组中允许包含若干普通数据或JSON对象
				1.使用JSON数组表示普通数据
					var arr = ["aa","bb","cc"];
				2.使用JSON数组表示若干对象
					var arr = [
						{
							"name":"aa",
							"age":12,
							"gender":"male"
						},
						{
							"name":"bb",
							"age":22,
							"gender":"female"							
						},
						{
							"name":"cc",
							"age":25,
							"gender":"female"							
						}
					];
	3.后台处理JSON
		1.前后台JSON数据交互流程(后->前)
			1.后台先获取数据
				类型:
					1.元组
					2.列表
					3.字典
					4.QuerySet
			2.在后台将数据转换为符合JSON格式的字符串
			3.在后台将JSON格式的字符串响应给前端
				return HttpResponse(JSON格式字符串)
			4.在前端,将响应回来的JSON字符串解析成JSON对象
		2.Python(Django)中的JSON处理
			1.元组,列表,字典
				使用Python提供的JSON类就可以完成转换
				import json
				jsonStr = json.dumps(元组|列表|字典)
			2.Django中的查询结果集 - QuerySet
				使用Django提供的序列化类完成QuerySet到JSON字符串的转换
				from django.core import serializers
				serializers.serialize('json',QuerySet)
			3.Django中查询单个对象
				使用Entry.objects.get(条件)查询单条数据是不允许被序列化为JSON格式的
				1.使用Entry.objects.filter()来替换Entry.objects.get(),替换后则可以正常序列化
				2.将Entry.objects.get()转换成字典后再json.dumps()
					class User(models.Model):
						...

						def to_dic(self):
							dic = {
								"uname":self.uname,
								"upwd":self.upwd,
								"uphone":self.uphone,
								"uemail":self.uemail,
							}
							return dic
		3.前端处理JSON
			将后端响应回来的JSON字符串转换为JSON对象
			在JS中:
				var JSON对象 = JSON.parse(JSON字符串);
4.JQUERY AJAX
	在jquery中提供了对原生ajax的封装操作
	1.$obj.load()
		作用:异步加载数据到$obj元素中
		语法:$obj.load(url[,data][,callback])
			1.url:异步请求的地址 
			2.data:传递给服务器端的数据
				1.传递普通的字符串
					"name=sf.zhang&age=85"
				2.传递JSON
					{
						"name":"sf.zh",
						"age":85
					}
			3.callback:异步请求完成后的回调函数
				function(resText,statusText){
					//resText:响应数据
					//statusText:响应的状态文本
				}
	2.$.get(url,data,callback,type)
		1.url:异步请求的地址
		2.data:请求提交的参数
		3.callback:请求成功时的回调函数
			function(data){
				//data:表示响应回来的数据
			}
		4.type:指定返回内容的格式类型
			1.html:响应回来的内容是html文本
			1.text:响应回来的内容是普通文本
			3.json:响应回来的内容是json对象
		*一般情况下,1和3是一定要写的
	3.$.post(url,data,callback,type)
	4.$.ajax()
		特点:所有的操作都可以自己定制
		语法:$.ajax({JSON对象});
			JOSN对象:
				1.url:字符串,指定要异步请求的地址
				2.type:字符串,指定提交方式为'get'或'post'
				3.data:JSON对象或字符串,要传递到后台服务器的参数
				4.datatype:字符串,指定响应回来的数据的类型
					1.'html':响应回来的数据是html文本
					2.'text':响应回来的数据是text文本
					3.'script':响应回来的数据是JavaScript代码片段
					4.'json':响应回来的数据是JSON对象
					5.'xml':响应回来的数据是xml文档
					6.'jsonp':JSONP格式,跨域时使用
				5.success:请求和响应成功时的回调函数
					success:function(data,textStatus){
						//data:响应成功时的响应数据
						//textStatus:响应状态文本
					}
				6.error:请求和响应出错时的回调函数
					error:function(xhr,textStatus){
						//xhr:异步请求对象
						//textStatus:响应状态文本
					}
				7.async:指定是否使用异步方式
					true:默认值,使用异步
					false:使用同步